variable "region" {
  type        = string
  description = "AWS region"
  nullable    = false
}

variable "ipv4_primary_cidr_block" {
  type        = string
  description = "IPv4 primary CIDR block for the VPC"
  nullable    = false
}

variable "availability_zones" {
  type        = list(string)
  description = "List of Availability Zones where subnets will be created"
  nullable    = false
}

variable "private_subnets_enabled" {
  type        = bool
  description = "If false, do not create private subnets (or NAT gateways or instances)"
  default     = true
  nullable    = false
}

variable "private_network_acl_enabled" {
  type        = bool
  description = <<-EOT
    If `true`, a single network ACL will be created and associated with every private subnet.
    If `false`, you will need to manage the network ACL outside of this module.
    EOT
  default     = true
  nullable    = false
}

variable "private_open_network_acl_enabled" {
  type        = bool
  description = <<-EOT
    If `true`, network ACL rules will be created and associated with the private network ACL
    allowing all ingress and all egress for the private subnets.
    The variables `private_subnets_enabled` and `private_network_acl_enabled` must also be set to `true` to create
    private subnets and a network ACL to associate the rules with.
    EOT
  default     = true
  nullable    = false
}

variable "private_network_acl_rules" {
  type = map(object({
    rule_action     = string
    rule_number     = number
    protocol        = string
    egress          = optional(bool, false)
    cidr_block      = optional(string)
    ipv6_cidr_block = optional(string)
    from_port       = optional(number)
    to_port         = optional(number)
    icmp_type       = optional(string)
    icmp_code       = optional(number)
  }))
  description = <<-EOT
    Map of Network ACL rules to associate with the private subnets.
    Use the map keys as human-readable descriptions of the rules.
    The variables `private_subnets_enabled` and `private_network_acl_enabled` must also be set to `true` to create
    private subnets and a network ACL to associate the rules with.
    EOT
  default     = {}
  nullable    = false
}

variable "public_subnets_enabled" {
  type        = bool
  description = <<-EOT
    If false, do not create public subnets.
    Since NAT gateways and instances must be created in public subnets, these will also not be created when `false`.
    EOT
  default     = true
  nullable    = false
}

variable "public_network_acl_enabled" {
  type        = bool
  description = <<-EOT
    If `true`, a single network ACL will be created and associated with every public subnet.
    If `false`, you will need to manage the network ACL outside of this module.
    EOT
  default     = true
  nullable    = false
}

variable "public_open_network_acl_enabled" {
  type        = bool
  description = <<-EOT
    If `true`, network ACL rules will be created and associated with the public network ACL
    allowing all ingress and all egress for the public subnets.
    The variables `public_subnets_enabled` and `public_network_acl_enabled` must also be set to `true` to create
    public subnets and a network ACL to associate the rules with.
    EOT
  default     = true
  nullable    = false
}

variable "public_network_acl_rules" {
  type = map(object({
    rule_action     = string
    rule_number     = number
    protocol        = string
    egress          = optional(bool, false)
    cidr_block      = optional(string)
    ipv6_cidr_block = optional(string)
    from_port       = optional(number)
    to_port         = optional(number)
    icmp_type       = optional(string)
    icmp_code       = optional(number)
  }))
  description = <<-EOT
    Map of Network ACL rules to associate with the public subnets.
    Use the map keys as human-readable descriptions of the rules.
    The variables `public_subnets_enabled` and `public_network_acl_enabled` must also be set to `true` to create
    public subnets and a network ACL to associate the rules with.
    EOT
  default     = {}
  nullable    = false
}

variable "open_network_acl_ipv4_rule_number" {
  type        = number
  description = "The rule number assigned to the network ACL rules for IPv4 traffic generated by this module"
  default     = 100
  nullable    = false
}

variable "open_network_acl_ipv6_rule_number" {
  type        = number
  description = "The rule number assigned to the network ACL rules for IPv6 traffic generated by this module"
  default     = 111
  nullable    = false
}
